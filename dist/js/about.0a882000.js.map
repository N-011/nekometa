{"version":3,"file":"js/about.0a882000.js","mappings":"oRAKA,MAAMA,GAA2B,OAAgB,IAAQ,CAAC,CAAC,SAAS,OAEpE,c,yRCNOC,MAAM,mB,0CAAXC,EAAAA,EAAAA,IAAmC,MAAnCC,E","sources":["webpack://nekometa/./src/views/AboutView.vue?d56f","webpack://nekometa/./src/views/AboutView.vue"],"sourcesContent":["import { render } from \"./AboutView.vue?vue&type=template&id=5fb419cd\"\nimport script from \"./AboutView.vue?vue&type=script&lang=js\"\nexport * from \"./AboutView.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <div class=\"about container\"></div>\n</template>\n\n<script>\n// // constants\n// const h = document.documentElement.clientHeight;\n// const w = document.documentElement.clientWidth;\n// const COLOR_BG = \"black\";\n// const COLOR_CUBE = \"royalblue\";\n// const R2 = (Math.min(w, h) * 1) / 3; // 도넛 반경\n// const R1 = (R2 * 1) / 2; // 도넛 두께\n// const DISTANCE = 500;\n// let Zoom = 1;\n// const SPACE = 0.1;\n// const SPEED = 0.02;\n// const SIZE = 200;\n// // set up the canvas and context\n// const canvas = document.createElement(\"canvas\");\n// canvas.style.scrollBehavior = \"none\";\n// document.body.appendChild(canvas);\n// const ctx = canvas.getContext(\"2d\");\n// canvas.addEventListener(\"wheel\", (e) => {\n//   e.preventDefault();\n//   if (e.deltaY > 0) Zoom += 10;\n//   if (e.deltaY < 0) Zoom -= 10;\n// });\n// // dimensions\n// canvas.height = h;\n// canvas.width = w;\n// function rotateX(point, theta) {\n//   const { y, z } = point;\n//   point.y = Math.cos(theta) * y - Math.sin(theta) * z;\n//   point.z = Math.sin(theta) * y + Math.cos(theta) * z;\n// }\n// function rotateY(point, theta) {\n//   const { x, z } = point;\n//   point.x = Math.cos(theta) * x + Math.sin(theta) * z;\n//   point.z = Math.cos(theta) * z - Math.sin(theta) * x;\n// }\n// function rotateZ(point, theta) {\n//   const { x, y } = point;\n//   point.x = Math.cos(theta) * x - Math.sin(theta) * y;\n//   point.y = Math.sin(theta) * x + Math.cos(theta) * y;\n// }\n// const points = [];\n// for (let theta = 0; theta < Math.PI * 2; theta += SPACE) {\n//   const x = R2 + R1 * Math.cos(theta);\n//   const y = R1 * Math.sin(theta);\n//   const z = 0;\n//   for (let t2 = 0; t2 < Math.PI * 2; t2 += SPACE) {\n//     const point = { x, y, z };\n//     rotateY(point, t2);\n//     points.push(point);\n//   }\n// }\n// requestAnimationFrame(render);\n// function render() {\n//   ctx.fillStyle = COLOR_BG;\n//   ctx.fillRect(0, 0, w, h);\n//   for (let point of points) {\n//     rotateX(point, SPEED);\n//     rotateY(point, SPEED);\n//     rotateZ(point, SPEED);\n//     const { z } = point;\n//     ctx.fillStyle = COLOR_CUBE;\n//     const { x, y } = convert3D(point);\n//     ctx.fillRect(x + w / 2, y + h / 2, (SIZE - z) / 100, (SIZE - z) / 100);\n//   }\n//   requestAnimationFrame(render);\n// }\n// function convert3D({ x, y, z }) {\n//   z = z + Zoom;\n//   return {\n//     x: (x / (z + DISTANCE)) * DISTANCE,\n//     y: (y / (z + DISTANCE)) * DISTANCE,\n//   };\n// }\n</script>\n\n<style></style>\n"],"names":["__exports__","class","_createElementBlock","_hoisted_1"],"sourceRoot":""}